!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}c((r=r.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const o=n(1),i=n(2),u=n(3);o.getElementAttribute().map(({userAttribute:t,updateAttribute:e})=>r(void 0,void 0,void 0,(function*(){const n=u.createDiv(t),r=u.createTable(),o=yield i.fetchReposInfo(t);o&&(u.createRowIfUpdateAttributePass(o,e,r),n.appendChild(r),document.body.appendChild(n))})))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.getElementAttribute=()=>[...document.getElementsByTagName("repos")].map(t=>({userAttribute:t.getAttribute("data-user")||"",updateAttribute:t.getAttribute("data-update")||""}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.fetchReposInfo=t=>fetch(`https://api.github.com/users/${t}/repos`).then(e=>e.ok?e.json():alert("Sorry, there is no possibility to display data of user "+t)).catch(()=>{alert("Something goes wrong")})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4),o=n(5),i=n(6);e.createTable=()=>{const t=document.createElement("table");return t.innerHTML="\n     <tr>\n      <th>Title</th>\n      <th>Description</th>\n      <th>Update</th>\n      <th>url</th>\n    </tr>\n  ",t},e.createDiv=t=>{const e=document.createElement("div");return e.innerHTML=`\n     <h1>${t}</h1>\n  `,e};e.createRowIfUpdateAttributePass=(t,e,n)=>{t.map(t=>{const{name:u,description:a,updated_at:c,html_url:s}=t,d=r.formatDate(c);o.compareUpdateWithUpdateAttribute(e,d)&&((t,e,n,r,o)=>{const u=new i.RepoRow(t,e,n,r).createRow();o.appendChild(u)})(u,a,d,s,n)})}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.formatDate=t=>t.slice(0,10)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.compareUpdateWithUpdateAttribute=(t,e)=>t<e},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.RepoRow=class{constructor(t,e,n,r){this.name=t,this.description=e,this.updated=n,this.url=r}createRow(){const t=document.createElement("tr");return t.innerHTML=`\n       <td>${this.name}</td>\n       <td>${this.description}</td>\n       <td>${this.updated}</td>\n       <td><a href=${this.url}/>click</td>\n      `,t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,