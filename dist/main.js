!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function u(e){try{a(r.next(e))}catch(e){i(e)}}function c(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(u,c)}a((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=n(1),i=n(2),u=n(3);o.getElementAttribute().map(({userAttribute:e,updateAttribute:t})=>r(void 0,void 0,void 0,(function*(){const n=u.createDiv(e),r=u.createTable(),o=yield i.fetchReposInfo(e);o&&(u.createRowIfUpdateAttributePass(o,t,r),n.appendChild(r),document.body.appendChild(n))})))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getElementAttribute=()=>[...document.getElementsByTagName("repos")].map(e=>({userAttribute:e.getAttribute("data-user")||"",updateAttribute:e.getAttribute("data-update")||""}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.fetchReposInfo=e=>fetch(`https://api.github.com/users/${e}/repos`).then(t=>t.ok?t.json():alert("Sorry, there is no possibility to display data of user "+e)).catch(()=>{alert("Something goes wrong")})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),o=n(5),i=n(6),u=n(7);t.createTable=()=>{const e=document.createElement("table");return e.innerHTML="\n     <tr>\n      <th>Title</th>\n      <th>Description</th>\n      <th>Update</th>\n      <th>url</th>\n    </tr>\n  ",e},t.createDiv=e=>{const t=document.createElement("div");return t.innerHTML=`\n     <h1>${e}</h1>\n  `,t};t.createRowIfUpdateAttributePass=(e,t,n)=>{e.map(e=>{const{name:c,description:a,updated_at:s,html_url:d}=e,l=r.formatDate(s);o.compareUpdateWithUpdateAttribute(t,l)&&((e,t,n,r,o)=>{const c=i.updateDescription(t),a=new u.RepoRow(e,c,n,r).createRow();o.appendChild(a)})(c,a,l,d,n)})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDate=e=>e.slice(0,10)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compareUpdateWithUpdateAttribute=(e,t)=>e<t},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateDescription=e=>null===e?"There is no description":e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.RepoRow=class{constructor(e,t,n,r){this.name=e,this.description=t,this.updated=n,this.url=r}createRow(){const e=document.createElement("tr");return e.innerHTML=`\n       <td>${this.name}</td>\n       <td>${this.description}</td>\n       <td>${this.updated}</td>\n       <td><a href=${this.url}/>click</td>\n      `,e}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,